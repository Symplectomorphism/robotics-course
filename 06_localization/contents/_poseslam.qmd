# Pose Graph SLAM

## Pose Graph SLAM {.smaller}

&nbsp;

* An alternative approach to the SLAM problem is to separate it into two
components:
  - a front-end and a back-end
* The robot's path is considered to be a sequence of distinct poses.
* The task is to estimate those poses.
* Constraints between the unknown poses are based on measurements from a variety
of sensors including odometry, laser scanners and cameras.

<center>
<img data-src="contents/assets/fig6_13.svg" />
</center>


## Pose Graph SLAM {.smaller}

:::: {.columns}

::: {.column width="50%"}
* The problem is formulated as a directed graph.
* A node corresponds to a robot pose or a landmark position.
* An edge between two nodes represents a spatial constraint between the nodes
derived from some sensor data.

::: {.callout-note icon="false"}
## Dead-reckoning example
The robot travels around a square. By the time the robot reaches node $4$, the
error is significant.

However, when it makes a measurement of node $1$, a consraint is added -- the
dashed edge -- indicating that the nodes are closer than the estimated relative
pose based on the chain of relative poses from odometry: ${^1}\xi_2^\sharp
\oplus {^2}\xi_3^\sharp \oplus {^3}\xi_4^\sharp$.

The back-end algorithm will then _pull_ all the nodes closer to their correct
pose.
:::

:::

::: {.column width="50%"}
<center>
<img data-src="contents/assets/fig6_14.svg" width="100%" />
</center>

::: {.callout-tip icon="false"}
## Pose-graph SLAM example
Places are shown as _circular nodes_ and have an associated pose.

Landmarks are shown as _star-shaped nodes_ and have an associated pose.

Edges represent a measurement of a relative pose or position w.r.t. the node at
the tail of the arrow.
:::

:::

::::


## Pose Graph SLAM {.smaller}

:::: {.columns}

* The front-end adds new nodes as the robot travels as well as edges that define 
constraints between poses. E.g.:
  - When moving from one place to another wheel odometry gives an estimate of
    distance and change in orientation, which is a constraint.
  - The robot's exteroceptive sensors may observe the relative position of a
    landmark and this also adds a constraint.
* Every measurement adds a constraint -- an edge in the graph.
  - There is no limit to the number of edges entering or leaving a node.

::: {.column width="50%"}
* The back-end adjusts the poses of the nodes so that the constraints are
satisfied as well as possible
  - The sensor observations are explained optimally.
:::

::: {.column width="50%"}
<center>
<img data-src="contents/assets/fig6_13.svg" />
</center>
:::

::::


## Pose Graph SLAM {.smaller}

:::: {.columns}

* Coordinate frames $\{i\}$ and $\{j\}$ are associated with robot poses $i$ and
$j$.

* We seek to estimate ${^0}\xi_i$ and ${^0}\xi_j$ in the world coordinate frame.

::: {.column width="70%"}
* The robot makes a measurement of the relative pose ${^i}\xi_j^\sharp$ which
will, in general, be different than the relative pose ${^i}\xi_j$ inferred from
poses ${^0}\xi_i$ and ${^0}\xi_j$.

* The difference, or _innovation_, is caused by the error in the sensor
measurement ${^i}\xi_j^\sharp$ and/or the node poses ${^0}\xi_i$ and ${^0}\xi_j$.
  - We use it to adjust the poses of the nodes.

* There is insufficient information to determine where the error lies
  - Naively adjusting ${^0}\xi_i$ and ${^0}\xi_j$ to better explain the
    measurement might increase the error in another part of the graph.
  - We need to minimize the error consistently over the whole graph.
:::

::: {.column width="30%"}
<center>
<img data-src="contents/assets/fig6_15.svg" />
</center>

::: {.callout-tip icon="false"}
## Pose graph notation
The _light gray robot_ is the estimated pose of $\{j\}$ based on the sensor
measurement ${^i}\xi_j^\sharp$.

The _yellow ellipse_ indicates the uncertainty associated with that measurement.
:::

:::

::::



## Pose Graph SLAM {.smaller}

* The first step is to express the error associated with the graph edge in terms
of the sensor measurement and our best estimates of the node poses w.r.t. the
world frame $$ \xi_\varepsilon = \ominus {^i}\xi_j^\sharp \ominus
{^0}\hat{\xi}_i \oplus {^0}\hat{\xi}_j \in \bm{SE}(2) $$ which is ideally zero.

:::: {.columns}

::: {.column width="70%"}
* We can formulate this as a minimization problem and attempt to find the poses
of all the nodes $\bm{x} = \left\{ \xi_1, \xi_2, \ldots, \xi_N \right\}$ that
minimizes the error across all the edges $$ \bm{x}^* = \arg \min_\bm{x} \sum_k
F_k(\bm{x}) $$ 
  - $\bm{x}$ is the state of the pose graph and contains the pose of every node.
  - $F_k(\bm{x})$ is a nonnegative scalar cost associated with the edge $k$
    connecting node $i$ to node $j$.
:::

::: {.column width="30%"}
<center>
<img data-src="contents/assets/fig6_15.svg" />
</center>
:::

* If we convert edge pose error to a vector representation $\xi_\varepsilon \sim
(x, y, \theta) = \bm{f}_k(\bm{x})$ then the scalar cost can be obtained as a
quadratic expression $$ \bm{F}_k(\bm{x}) = \bm{f}_k^\top \bm{\Omega}_k
\bm{f}_k(\bm{x}). $$

::::


## Pose Graph SLAM {.smaller}

:::: {.columns}

::: {.column width="70%"}
* The pose graph can also include landmarks as shown in the figure.
* Landmarks have a position $\bm{P}_j \in \mathbb{R}^2$, not a pose, and
therefore differ from the nodes discussed so far.
* To accommodate this, we redefine the state vector $\bm{x} = \left\{ \xi_1,
\xi_2, \ldots, \xi_n \vert \bm{P}_1, \bm{P}_2, \ldots, \bm{P}_M \right\}$.
:::

::: {.column width="30%"}
<center>
<img data-src="contents/assets/fig6_18.svg" />
</center>
:::

* The robot at pose $i$ observes landmark $j$ at range and bearing
$\bm{z}^\sharp = \left( r^\sharp, \beta^\sharp \right)$ which is converted to
Cartesian form in frame $\{i\}$ $$ {^i}\bm{P}_j^\sharp = \left( r^\sharp
\cos{\beta^\sharp}, r^\sharp \sin{\beta^\sharp} \right) \in \mathbb{R}^2. $$

* The estimated position of the landmark in frame $\{i\}$ is $$
{^i}\hat{\bm{P}}_j = \left( \ominus {^0}\xi_i \right) \bullet \hat{\bm{P}}_j \in \mathbb{R}^2 $$
and the error vector is $$ \bm{f}_k(\bm{x}) = \varepsilon = {^i}\hat{\bm{P}}_j -
{^i}\bm{P}_j^\sharp \in \mathbb{R}^2. $$

::::
